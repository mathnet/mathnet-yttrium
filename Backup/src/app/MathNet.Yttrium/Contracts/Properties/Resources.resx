<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ex_CyclicSignalsNotSupportes" xml:space="preserve">
    <value>The operation '{0}' does not support circular systems, that is systems with signals depending upon themselves.</value>
  </data>
  <data name="ex_Deserialize_Failed_GenericEntity" xml:space="preserve">
    <value>Failed to deserialize the entity {0}.{1}: entity is generic but no extension is attached.</value>
  </data>
  <data name="ex_Deserialize_Failed_UnexpectedPosition" xml:space="preserve">
    <value>Failed to deserialize an item, due to an invalid data file or a usage error. Expected '{0}' but got '{1}' instead. Check the data file for errors and report to the developer.</value>
  </data>
  <data name="ex_Deserialize_Failed_UnsupportedCategory" xml:space="preserve">
    <value>No proper category deserialization method found.</value>
  </data>
  <data name="ex_Deserialize_Failed_UnsupportedStructure" xml:space="preserve">
    <value>No proper structure deserialization method found.</value>
  </data>
  <data name="ex_Entity_Unexpected_SignalCount" xml:space="preserve">
    <value>The operation expected {0} but got {1} instead. Maybe an extension module is not loaded yet, there is a typo, or the module is faulty.</value>
  </data>
  <data name="ex_NotAvailable_Architecture" xml:space="preserve">
    <value>No Math.NET Architecture matching the requirements (including supporting the entity '{0}') was found. Maybe an extension module is not loaded yet, or the input signals are not qualified enough.</value>
  </data>
  <data name="ex_NotAvailable_Domain" xml:space="preserve">
    <value>The currently loaded context library does not list the demanded domain '{0}'. Maybe an extension module is not loaded yet, there is a typo, or the module is faulty.</value>
  </data>
  <data name="ex_NotAvailable_Entity" xml:space="preserve">
    <value>The currently loaded context library does not list the demanded entity '{0}'. Maybe an extension module is not loaded yet, there is a typo, or the module is faulty.</value>
  </data>
  <data name="ex_NotFound" xml:space="preserve">
    <value>The search for a specific item has returned no result.</value>
  </data>
  <data name="ex_NotImplementedYet" xml:space="preserve">
    <value>A requested feature is not yet implemented.</value>
  </data>
  <data name="ex_Parsing_Failed_TokenMismatch" xml:space="preserve">
    <value>Parsing failed. Token Mismatch. Expected '{0}' but got '{1}' around '{2}'.</value>
  </data>
  <data name="ex_Parsing_Failed_TokenMismatchEx" xml:space="preserve">
    <value>Parsing failed. Token Mismatch. Expected '{0} [{3}]' but got '{1}' around '{2}'.</value>
  </data>
  <data name="ex_Theorem_Mismatch" xml:space="preserve">
    <value>A theorem was used on a wrong item or a matching theorem was not found. This probably is a programming error, please report to the manufacturer.</value>
  </data>
  <data name="ex_Traversing_Failed_ReserveMutex" xml:space="preserve">
    <value>A mutual exclusive system traversing strategy is already in use and may not be executed again before the other finishes its operation.</value>
  </data>
</root>